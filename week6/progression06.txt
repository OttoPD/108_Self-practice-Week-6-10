First-Class และ Higher-Order Functions
อันนี้หมายความว่า “ฟังก์ชัน” มันไม่ใช่แค่เอาไว้เรียกใช้อย่างเดียว แต่เราสามารถเก็บมันไว้ในตัวแปร ส่งมันเป็นพารามิเตอร์ให้ฟังก์ชันอื่น หรือจะให้มัน return ฟังก์ชันกลับมาก็ได้ เป็นพื้นฐานสำคัญเลย เพราะถ้าเข้าใจส่วนนี้ดี จะต่อยอดไปเรื่องอื่นได้ง่ายมาก

Immutability
คือเวลาเราทำงานกับข้อมูล เราจะไม่ไปแก้ค่าของข้อมูลเดิม แต่จะสร้างข้อมูลชุดใหม่ขึ้นมาแทน วิธีนี้ช่วยให้เราอธิบายขั้นตอนการทำงานของโปรแกรมได้แบบชัด ๆ เป็นลำดับ ลดโอกาสพลาดและโค้ดก็อ่านง่ายขึ้น

Declarative
เป็นแนวคิดที่เน้น “บอกว่าอยากได้ผลลัพธ์อะไร” โดยไม่ต้องมานั่งไล่บอกทุกขั้นตอนว่าต้องทำยังไง เหมือนเราโฟกัสที่ปลายทาง ไม่ใช่วิธีไปถึง

Pure Functions
คือฟังก์ชันที่ทำงานโดยใช้ค่าที่รับเข้ามาเท่านั้น ไม่มีการยุ่งกับตัวแปรข้างนอก ข้อดีก็คือ มันจะให้ผลลัพธ์เหมือนเดิมทุกครั้งที่เรียก และไม่มีผลข้างเคียง ทำให้โค้ดมีความเสถียร

Impure Functions
ส่วนอันนี้ตรงข้ามเลย เพราะมันไปดึงค่าจากตัวแปรภายนอกมาใช้ ซึ่งอาจทำให้ผลลัพธ์เปลี่ยนไปได้ แม้จะรันเหมือนเดิม เป็นจุดที่ต้องระวัง เพราะจะทำให้โค้ดพังหรือเดายากว่าผลจะออกมายังไง

Function Composition
คือการเอาฟังก์ชันหนึ่งมาเป็นพารามิเตอร์ของอีกฟังก์ชันหนึ่ง ทำให้เราสามารถเชื่อมการทำงานหลาย ๆ ฟังก์ชันเข้าด้วยกันได้ โค้ดก็จะดูเป็นระเบียบและแก้ไขง่าย

Function Scope และ Nested Functions
ตรงนี้พูดง่าย ๆ คือ เราสามารถเขียนฟังก์ชันซ้อนในฟังก์ชันได้ ฟังก์ชันด้านในสามารถเรียกใช้ตัวแปรของฟังก์ชันด้านนอกได้ และเรายังสามารถ return ฟังก์ชันนั้นออกมาใช้นอกได้อีก

Closures
คือฟังก์ชันที่มันยัง “จำ” ค่าหรือตัวแปรจากตอนที่มันถูกสร้างได้ ถึงจะถูกเอาไปใช้ข้างนอกก็ยังจำได้อยู่ ทำให้เราไม่ต้องพึ่งตัวแปร global และควบคุมข้อมูลได้ง่ายขึ้นมาก